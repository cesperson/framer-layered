// Generated by CoffeeScript 1.7.1
(function() {
  var PSD, nextState, prepDot, resetStates, setVerticalOffset, setupVertical, setupVertical2, verticalOffset;

  PSD = Framer.Importer.load("imported/dots");

  tools.storeOriginal(PSD);

  PSD.dotActive.states.animationOptions = {
    curve: "bezier-curve",
    curveOptions: "ease-in-out",
    time: 1
  };

  resetStates = function() {
    return PSD.dotActive.states.add({
      dot1: {
        x: PSD.dot1.x,
        y: PSD.dot1.y
      },
      dot2: {
        x: PSD.dot2.x,
        y: PSD.dot2.y
      },
      dot3: {
        x: PSD.dot3.x,
        y: PSD.dot3.y
      }
    });
  };

  prepDot = function(view) {
    view.draggable.enabled = true;
    view.on(Events.DragMove, resetStates);
    view.on(Events.DragStart, function() {
      return view.opacity = 1;
    });
    view.on(Events.DragEnd, function() {
      return view.opacity = 0.1;
    });
    return view.opacity = 0.1;
  };

  PSD.dotActive.sendToBack();

  PSD.dotActive.placeBefore(PSD.background);

  PSD.bg.sendToBack();

  prepDot(PSD.dot1);

  prepDot(PSD.dot2);

  prepDot(PSD.dot3);

  resetStates();

  nextState = function(view) {
    if (view.states.current === "default" || view.states.current === "dot3") {
      return PSD.dotActive.states["switch"]("dot1");
    } else if (view.states.current === "dot1") {
      return PSD.dotActive.states["switch"]("dot2");
    } else if (view.states.current === "dot2") {
      return PSD.dotActive.states["switch"]("dot3");
    }
  };

  PSD.dotActive.on(Events.AnimationEnd, function() {
    if (PSD.dotActive.states.current === "dot3") {
      return PSD.dotActive.states["switch"]("dot1");
    } else if (PSD.dotActive.states.current === "dot1") {
      return PSD.dotActive.states["switch"]("dot2");
    } else if (PSD.dotActive.states.current === "dot2") {
      return PSD.dotActive.states["switch"]("dot3");
    }
  });

  PSD.dotActive.states["switch"]("dot1");

  PSD.distancedot1.draggable.enabled = true;

  PSD.distancedot1.draggable.speedX = 0;

  PSD.distancedot2.draggable.enabled = true;

  PSD.distancedot2.draggable.speedX = 0;

  verticalOffset = PSD.distancedot1.y - PSD.distancedot2.y;

  setVerticalOffset = function() {
    verticalOffset = PSD.distancedot1.y - PSD.distancedot2.y;
    console.log(verticalOffset);
    PSD.dotInside.states.add({
      top: {
        y: PSD.dotInside.originalFrame.y + verticalOffset
      },
      bottom: {
        y: PSD.dotInside.originalFrame.y - verticalOffset
      }
    });
    return PSD.distancedotbackforth.states.add({
      top: {
        y: PSD.distancedot2.y
      },
      bottom: {
        y: PSD.distancedot1.y + 21
      }
    });
  };

  PSD.distancedot1.on(Events.DragEnd, setVerticalOffset);

  PSD.distancedot2.on(Events.DragEnd, setVerticalOffset);

  setVerticalOffset();

  setupVertical = function(view) {
    view.states.add({
      top: {
        y: view.originalFrame.y + verticalOffset
      },
      bottom: {
        y: view.originalFrame.y - verticalOffset
      }
    });
    view.states.animationOptions = {
      curve: "bezier-curve",
      curveOptions: "ease-in-out",
      time: 0.5
    };
    view.on(Events.AnimationEnd, function() {
      if (view.states.current === "top") {
        return view.states["switch"]("bottom");
      } else {
        return view.states["switch"]("top");
      }
    });
    return view.states["switch"]("top");
  };

  setupVertical(PSD.dotInside);

  setupVertical2 = function(view) {
    view.states.add({
      top: {
        y: PSD.distancedot2.y
      },
      bottom: {
        y: PSD.distancedot1.y
      }
    });
    view.states.animationOptions = {
      curve: "bezier-curve",
      curveOptions: "ease-in-out",
      time: 0.5
    };
    view.on(Events.AnimationEnd, function() {
      if (view.states.current === "top") {
        return view.states["switch"]("bottom");
      } else {
        return view.states["switch"]("top");
      }
    });
    return view.states["switch"]("top");
  };

  setupVertical2(PSD.distancedotbackforth);

  PSD.dotScale.states.add({
    big: {
      scale: 1.5
    },
    small: {
      scale: 0.5
    }
  });

  PSD.dotScale.states.animationOptions = {
    curve: 'spring(150,20,0)'
  };

  PSD.dotScale.on(Events.AnimationEnd, function() {
    if (PSD.dotScale.states.current === "big") {
      return PSD.dotScale.states["switch"]("small");
    } else {
      return PSD.dotScale.states["switch"]("big");
    }
  });

  PSD.dotScale.states["switch"]("small");

  PSD.scalecontrol.draggable.enabled = true;

  PSD.scalecontrol.on(Events.DragEnd, function(event, layer) {
    var animation;
    return animation = layer.animate({
      properties: {
        x: layer.originalFrame.x,
        y: layer.originalFrame.y
      },
      curve: "spring",
      curveOptions: {
        friction: 20,
        tension: 400,
        velocity: 20
      }
    });
  });

}).call(this);
